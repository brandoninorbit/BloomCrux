
'use client';

import React, { useEffect, useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import type { Deck as DeckType, DeckProgress, BloomLevel, Topic, UserDeckProgress, GlobalProgress, UserPowerUps, UserXpStats, UserSettings } from '@/types';
import { Loader2, User, BookOpen, Award, Coins, LineChart, ChevronDown, CheckCircle, Target, Zap, Vault, GripVertical, Rocket } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useUserAuth } from '@/context/AuthContext';
import Link from 'next/link';
import { getDeckProgress, getTopics, getUserProgress, getUserXpStats } from '@/lib/firestore';
import GlobalProgressHeader from './GlobalProgressHeader';
import { useRouter } from 'next/navigation';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { cn } from '@/lib/utils';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import dynamic from 'next/dynamic';
import { useUserSettings } from '@/hooks/useUserSettings';
import AgentCard from './AgentCard';


const DevVaultPanel = dynamic(
  () => import('@/components/DevVaultPanel'),
  {
    ssr: false,
    loading: () => <p className="text-sm text-center p-4">Loading vaultÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦</p>
  }
);


const StatCard = ({ title, value, unit, icon, ...props }: { title: string, value: string | number, unit?: string, icon: React.ReactNode, [key: string]: any }) => (
  <Card className="text-center p-4 h-full" {...props}>
    <CardHeader className="p-2 flex-row items-center justify-center gap-2">
      {icon}
      <CardTitle className="text-sm font-medium text-muted-foreground">{title}</CardTitle>
    </CardHeader>
    <CardContent className="p-2">
      <div className="text-2xl font-bold">
        {value}
        {unit && <span className="text-lg font-medium">{unit}</span>}
      </div>
    </CardContent>
  </Card>
);

const bloomOrder: BloomLevel[] = ['Remember', 'Understand', 'Apply', 'Analyze', 'Evaluate', 'Create'];

const MOCK_GLOBAL_PROGRESS: GlobalProgress = { total: 0, reviewed: 0, percent: 0, level: 5, xp: 250, xpToNext: 1000 };
const MOCK_SETTINGS: UserSettings = { displayName: 'Mock User', email: 'mock@example.com', tokens: 1250, unlockedLevels: {} } as UserSettings;
const MOCK_DECK_PROGRESS: DeckProgress[] = [
    { deckId: 'mock1', deckName: 'Cellular Respiration', totalCards: 25, lastStudied: new Date(), isMastered: false, level: 3, xp: 40, xpToNext: 150, progress: 60, bloomMastery: { 'Remember': { correct: 8, total: 10 }, 'Understand': { correct: 5, total: 7 }}},
    { deckId: 'mock2', deckName: 'Photosynthesis', totalCards: 30, lastStudied: new Date(), isMastered: true, level: 5, xp: 110, xpToNext: 200, progress: 100, bloomMastery: { 'Remember': { correct: 10, total: 10 }, 'Understand': { correct: 9, total: 10 }, 'Apply': {correct: 8, total: 10 }}},
];
const MOCK_XP_STATS: UserXpStats = { sessionXP: 120, dailyXP: 850, bonusVault: 50, commanderXP: (MOCK_GLOBAL_PROGRESS?.xp ?? 0), sessionStart: new Date(), lastDailyReset: new Date(), isXpBoosted: true };

type DashboardSection = 'header' | 'devControls' | 'dossiers' | 'progressChart';
const initialSections: DashboardSection[] = ['header', 'devControls', 'dossiers', 'progressChart'];

export default function DashboardClient() {
    const [deckProgress, setDeckProgress] = useState<DeckProgress[]>([]);
    const [globalProgress, setGlobalProgress] = useState<GlobalProgress | null>(null);
    const { user } = useUserAuth();
    const { settings, loading: settingsLoading } = useUserSettings();
    const [xpStats, setXpStats] = useState<UserXpStats | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const router = useRouter();
    const { toast } = useToast();
    const [showExample, setShowExample] = useState(false);

    const [devMode, setDevMode] = useState(false);
    const [showVault, setShowVault] = useState(false);

    const [sections, setSections] = useState<DashboardSection[]>(initialSections);

    useEffect(() => {
        if (typeof window !== "undefined") {
            const devModeActive = localStorage.getItem("devMode") === "true";
            setDevMode(devModeActive);
        }

        const fetchProgress = async () => {
            if (!user) {
                setIsLoading(false);
                return;
            };

            setIsLoading(true);

            const [userTopics, attempts, userProgress, userXpStats] = await Promise.all([
                getTopics(user.uid),
                getDeckProgress(user.uid),
                getUserProgress(user.uid),
                getUserXpStats(user.uid)
            ]);

            setGlobalProgress({ total: userProgress.global?.total ?? 0, reviewed: userProgress.global?.reviewed ?? 0, percent: userProgress.global?.percent ?? 0, ...(userProgress.global ?? {}) });
            setXpStats(userXpStats);

            const allDecksRaw: any[] = Array.isArray(userTopics)
  ? userTopics.flatMap((t: any) => Array.isArray(t?.decks) ? t.decks : [])
  : [];

const decksArr: any[] = Array.isArray(allDecksRaw)
  ? allDecksRaw
  : (allDecksRaw ? Object.values(allDecksRaw as any) : []);

const progressByDeck: { [deckId: string]: DeckProgress } = {};

// iterate decks
for (const deck of (decksArr as any[])) {
  const key: string = String((deck as any)?.id ?? (deck as any)?.deckId ?? "");
  if (!key) continue;

  const name: string = String((deck as any)?.title ?? (deck as any)?.deckName ?? "Unknown Deck");
  const decksById = (userProgress.decks ?? {}) as unknown as Record<string, { level: number; xp: number; xpToNext: number }>;
  const deckSpecificProgress = decksById[key] ?? { level: 1, xp: 0, xpToNext: 100 };

  progressByDeck[key] = {
    deckId: key,
    deckName: name,
    totalCards: Array.isArray((deck as any)?.cards)
      ? (deck as any).cards.length
      : (Array.isArray((deck as any)?.cardIds) ? (deck as any).cardIds.length : 0),
    isMastered: Boolean((deck as any)?.isMastered),
    lastStudied: new Date(0),
    bloomMastery: {},
    ...deckSpecificProgress,
  };
}

// fold in attempts
for (const attempt of (attempts as any[])) {
  const aid: string = String(attempt?.deckId ?? attempt?.deck_id ?? attempt?.deckID ?? "");
  if (!aid) continue;
  const current = progressByDeck[aid];
  if (!current) continue;

  const ts: Date = attempt?.timestamp instanceof Date ? attempt.timestamp : new Date(attempt?.timestamp ?? 0);
  const last = current.lastStudied ? new Date(current.lastStudied as any) : new Date(0);
if (ts > last) current.lastStudied = ts;

  const lvl: string = String(attempt?.bloomLevel ?? attempt?.level ?? "Unknown");
  const bm = (current.bloomMastery ?? (current.bloomMastery = {}));
if (!bm[lvl]) bm[lvl] = { correct: 0, total: 0 };
const m = bm[lvl]!;
  m.total += 1;
  if (Boolean(attempt?.correct)) m.correct += 1;
}

const finalProgress = Object.values(progressByDeck).sort((a,b) => {
  const at = a.lastStudied ? new Date(a.lastStudied as any).getTime() : 0;
  const bt = b.lastStudied ? new Date(b.lastStudied as any).getTime() : 0;
  return bt - at;
});

            setDeckProgress(finalProgress);
            setIsLoading(false);
        };

        if (user) {
            fetchProgress();
        } else {
            setIsLoading(false);
        }
    }, [user]);

    const overallStats = useMemo(() => {
        const source = showExample ? MOCK_DECK_PROGRESS : deckProgress;
        let totalReviewed = 0;
        let masteredDecks = 0;

        source.forEach(deck => {
            if (deck.isMastered) masteredDecks++;
            Object.values(deck.bloomMastery ?? {}).forEach(level => {
                if (level && typeof level.total === "number") totalReviewed += level.total;
            });
        });

        return { reviewed: totalReviewed, masteredDecks };
    }, [deckProgress, showExample]);

    if (isLoading || settingsLoading) {
        return (
            <div className="flex h-screen items-center justify-center">
                <Loader2 className="h-12 w-12 animate-spin text-primary" />
            </div>
        );
    }

    if (!user) {
        return (
            <div className="container mx-auto flex max-w-4xl flex-col items-center justify-center p-4 py-8 text-center">
                <Card className="w-full text-center shadow-lg p-8">
                    <CardHeader>
                        <User className="mx-auto h-16 w-16 text-primary" />
                        <CardTitle className="font-headline text-2xl mt-4">View Your Progress</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="text-muted-foreground mb-6">Please log in or sign up to track and view your study progress.</p>
                        <div className="flex justify-center gap-4">
                            <Button asChild>
                               <Link href="/login">Login</Link>
                            </Button>
                             <Button asChild variant="secondary">
                               <Link href="/signup">Sign Up</Link>
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        );
    }

    const progressToDisplay = showExample ? MOCK_DECK_PROGRESS : deckProgress;
    const globalProgressToDisplay = showExample ? MOCK_GLOBAL_PROGRESS : globalProgress;
    const settingsToDisplay = showExample ? MOCK_SETTINGS : settings;
    const xpStatsToDisplay = showExample ? MOCK_XP_STATS : xpStats;

    const sectionsMap: Record<DashboardSection, React.ReactNode> = {
        header: (
         <Card>
             <CardHeader className="flex-row items-center justify-between p-4">
                <CardTitle>Commander Overview</CardTitle>
            </CardHeader>
            <CardContent className="p-4 pt-0">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="md:col-span-2 flex flex-col gap-6">
                        <GlobalProgressHeader global={globalProgressToDisplay} xpStats={xpStatsToDisplay} />
                         <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 h-full">
                            <StatCard title="Total Cards Reviewed" value={overallStats.reviewed} icon={<BookOpen />} />
                            <StatCard title="Decks Mastered" value={overallStats.masteredDecks} icon={<Award />} />
                         </div>
                    </div>
                    <div className="md:col-span-1 h-full">
                        <AgentCard 
                            globalProgress={globalProgressToDisplay} 
                            settings={settingsToDisplay ? {displayName: settingsToDisplay.displayName ?? "", tokens: settingsToDisplay.tokens ?? 0} : null}
                            photoURL={user?.photoURL}
                        />
                    </div>
                </div>
            </CardContent>
         </Card>
        ),
        devControls: devMode ? (
            <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle className="flex items-center gap-2">
                        <Vault className="h-5 w-5 text-primary" />
                        Developer Controls
                    </CardTitle>
                </CardHeader>
                <CardContent className="flex gap-4">
                    <Button onClick={() => setShowVault(!showVault)}>
                        {showVault ? 'Hide' : 'Show'} Dev Vault
                    </Button>
                    <Button variant="destructive" onClick={() => {
                        localStorage.removeItem("devMode");
                        setDevMode(false);
                        setShowVault(false);
                    }}>
                        Deactivate Dev Mode
                    </Button>
                </CardContent>
            </Card>
        ) : null,
        dossiers: (
            <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle>Deck Dossiers</CardTitle>
                </CardHeader>
                <CardDescription className="px-6 pb-4">Select a deck to continue your training.</CardDescription>
                <CardContent className="space-y-4">
                {progressToDisplay.length > 0 ? (
                    progressToDisplay.map(progress => (
                        <Collapsible key={progress.deckId} className="border rounded-lg p-4" defaultOpen>
                        <CollapsibleTrigger className="flex justify-between items-center w-full">
                            <div className="text-left">
                                <h4 className="font-semibold">{progress.deckName}</h4>
                                <p className="text-sm text-muted-foreground">Level {progress.level} - {progress.xp}/{progress.xpToNext} XP</p>
                            </div>
                            <div className="flex items-center gap-2">
                                {progress.isMastered && <Award className="h-5 w-5 text-yellow-500" />}
                                <ChevronDown className="h-5 w-5 transition-transform duration-200 data-[state=open]:rotate-180" />
                            </div>
                        </CollapsibleTrigger>
                        <CollapsibleContent className="pt-4 space-y-3">
                            <div className="space-y-2">
                                {bloomOrder.map(level => {
                                const bm = (progress.bloomMastery ?? {}) as Record<string, { correct: number; total: number }>; const levelData = bm[level];
                                if(!levelData || levelData.total === 0) return null;
                                const accuracy = Math.round((levelData.correct / levelData.total) * 100);
                                const isMastered = accuracy >= 80;
                                return (
                                    <div key={level}>
                                        <div className="flex justify-between items-center text-sm mb-1">
                                            <span className="font-medium">{level}</span>
                                            <span className={cn("font-semibold", isMastered ? "text-green-600" : "text-amber-600")}>{accuracy}%</span>
                                        </div>
                                        <Progress value={accuracy} className={isMastered ? "[&>div]:bg-green-500" : "[&>div]:bg-amber-500"}/>
                                    </div>
                                )
                                })}
                            </div>
                            <div className="flex justify-end gap-2 pt-2">
                                <Button variant="outline" size="sm" asChild>
                                    <Link href={`/decks/${progress.deckId}/study/level-up`}>
                                        <Rocket className="mr-2 h-4 w-4" /> Level Up
                                    </Link>
                                </Button>
                                <Button size="sm" asChild>
                                    <Link href={`/decks/${progress.deckId}/study`}>Continue Study</Link>
                                </Button>
                            </div>
                        </CollapsibleContent>
                        </Collapsible>
                    ))
                    ) : (
                    <div className="text-center py-10 col-span-full">
                        <p className="text-muted-foreground mb-4">
                            No decks found. Create a deck and start studying to see your progress!
                        </p>
                        <Button asChild className="mb-2">
                            <Link href="/decks">Create a Deck</Link>
                        </Button>
                    </div>
                    )}
                </CardContent>
                <CardFooter className="justify-center">
                    <Link href="/agent-classified" passHref>
                        <Button variant="link" className="text-xs text-muted-foreground hover:text-foreground">ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ Agent Classified</Button>
                    </Link>
                </CardFooter>
            </Card>
        ),
        progressChart: (
            <Card className="mt-6 bg-muted/30">
                <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle className="flex items-center gap-2 text-muted-foreground">
                        <LineChart className="h-5 w-5" />
                        Progress Over Time
                    </CardTitle>
                </CardHeader>
                <CardDescription className="px-6 pb-4">This chart will show your review activity and mastery trends over the past month. Coming soon!</CardDescription>
                <CardContent className="h-48 flex items-center justify-center">
                    <p className="text-sm text-muted-foreground">Chart data will appear here.</p>
                </CardContent>
            </Card>
        )
    };


    return (
        <div className="container mx-auto px-6 py-12">
            <div className="max-w-5xl mx-auto space-y-8">
                <div className="flex justify-between items-center">
                    <div>
                        <h1 className="text-3xl font-headline text-foreground mb-1">Commander Debriefing</h1>
                        <p className="text-base text-muted-foreground font-body">Review your overall performance and deck-specific mastery levels.</p>
                    </div>
                     <Button variant="link" onClick={() => setShowExample(!showExample)}>
                        {showExample ? 'Hide Example' : 'Show Example Data'}
                    </Button>
                </div>
                
                {xpStatsToDisplay && xpStatsToDisplay.bonusVault > 0 && (
                    <Card className="my-6 bg-yellow-50 border-yellow-300">
                        <CardContent className="p-4 flex items-center gap-4">
                           <div className="p-2 bg-yellow-100 rounded-full">
                             <Zap className="h-5 w-5 text-yellow-600" />
                           </div>
                           <div>
                            <p className="font-bold text-yellow-800">Bonus Vault Ready!</p>
                            <p className="text-sm text-yellow-700">You have {xpStatsToDisplay.bonusVault} bonus XP waiting for tomorrow!</p>
                           </div>
                        </CardContent>
                    </Card>
                )}

                {xpStatsToDisplay && xpStatsToDisplay.isXpBoosted && (
                     <Card className="my-6 bg-blue-50 border-blue-300">
                        <CardContent className="p-4 flex items-center gap-4">
                           <div className="p-2 bg-blue-100 rounded-full">
                             <Zap className="h-5 w-5 text-blue-600" />
                           </div>
                           <div>
                            <p className="font-bold text-blue-800">2x XP Booster Active!</p>
                            <p className="text-sm text-blue-700">All XP gains in your current session are doubled!</p>
                           </div>
                        </CardContent>
                    </Card>
                )}
                
                {devMode && showVault && <DevVaultPanel />}

                <div className="space-y-8">
                  {initialSections.map((sectionId) => {
                    const cardElement = sectionsMap[sectionId];
                    if (!cardElement) return null;
                    return (
                      <div key={sectionId}>
                        {cardElement}
                      </div>
                    );
                  })}
                </div>
            </div>
        </div>
    );
}


