/**
 * Minimal mock Firestore layer for build stability.
 * Replace internals with real Firebase logic later.
 */

export type Inventory = Record<string, number>;

export type DeckProgress = {
  deckId: string;
  progress: number;
  correct: number;
  total: number;
};

// ---- Deck progress (overloads) ----
export async function getUserDeckProgress(_userId: string, deckId: string): Promise<DeckProgress> {
  return { deckId, progress: 0, correct: 0, total: 0 };
}

export function getDeckProgress(userId: string): Promise<DeckProgress[]>;
export function getDeckProgress(userId: string, deckId: string): Promise<DeckProgress>;
export function getDeckProgress(_userId: string, deckId?: string): any {
  if (deckId) {
    return Promise.resolve({ deckId, progress: 0, correct: 0, total: 0 });
  }
  return Promise.resolve([
    { deckId: "mock1", progress: 0, correct: 0, total: 0 },
    { deckId: "mock2", progress: 0, correct: 0, total: 0 },
  ]);
}

// ---- Purchases / inventory ----
export async function getDeckPurchaseCounts(_u: string, _d: string) { return {}; }

export function getUserInventory(userId: string, cb: (inv: Inventory) => void): () => void;
export async function getUserInventory(userId: string): Promise<Inventory>;
export function getUserInventory(_userId: string, cb?: (inv: Inventory) => void): any {
  const empty: Inventory = {};
  if (cb) {
    cb(empty); // initial push
    return () => { /* unsubscribe noop */ };
  }
  return Promise.resolve(empty);
}

export async function saveUserDeckProgress(_u: string, _d: string, _data: Partial<DeckProgress>) { return true; }
export async function saveUserPowerUps(_u: string, _data: any) { return true; }
export async function resetDeckPurchaseCounts(_u: string, _d: string) { return true; }
export async function purchasePowerUp(_u: string, _d: string, _pid: string) { return { ok: true }; }

export async function logCardAttempt(_p: {
  userId: string;
  deckId: string;
  cardId: string;
  correct: boolean;
  mode: "practice" | "quest" | "timed" | "remix";
}) { return true; }

// ---- Profile photo upload (stub) ----
export async function uploadProfilePhotoAndUpdateAuth(_file: any, _userId?: string): Promise<string> {
  return ""; // replace with real URL after wiring storage
}
